given:
  n -> children
  ratings = [of ratings of teh child]

  conditions:
    -> each child get atleast one candy .
    -> child with high ratings get high candy than the adjacent neighbours.


    To find:
      -> min number of candy needed to distribute to the childrens.


ex: [1,0,2]


my initial idea:
  -> since we need to consider only the nearest neighbour:
  therefore the sliding window length is 2 and it keeps on moving or sliding one by one.


  [[1,0],2] -> check which is smaller and give him one , and the one next to him had more than that because of the rating, so give 2,
  then the window slides
  and and if the net to him has less than it it will change and then it come back to change teh previous accordingly.



Java code:

class Solution {
public:
      int candy(vector<int>& ratings) {
      int window = 0;
      List<Integer> countList = new ArrayList<>();
      int c = 0;
      int cand = 0;
      for(int i =0;i<ratings.length;i++){
        if (ratings[i]>ratings[i+1]){
            c+=1;
            c+=1
            countList.add(c);
            countList.add(c-1);
            cand+=c;
          }
        if (ratings[i]<ratings[i+1]){
            int less = c.get(i);
            int great = less+1
            countList.add(great)
            cand+=great
          }
        }


        }
        return cand;
    }
};


[1,0,2,3,4,2,3,3,5,4]
2  1 2 3 4 1 2 1 2 1
